{"ast":null,"code":"var _jsxFileName = \"/Users/rachelleondiege/ReactClass/http-access/src/containers/Blog/FullPost/FullPost.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './FullPost.css';\n\nclass FullPost extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loadedPost: null\n    };\n\n    this.deletePostHandler = () => {\n      axios.delete('/posts/' + this.props.match.params.id).then(response => {\n        console.log(response);\n        this.setState({\n          loadedPost: null\n        });\n      });\n    };\n  }\n\n  componentDidMount(prevProps, prevState, snapshot) {\n    console.log(this.props);\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.loadData();\n  } // we have to us both DidMount and DidUpdate when using routes, as routes re-uses components\n\n\n  loadData() {\n    if (this.props.match.params.id) {\n      // If we don't do this we will get in infinite loop as setting the state will\n      // keep calling render, which will keep calling this function\n      if (!this.state.loadedPost || this.state.loadedPost.id != this.props.match.params.id) {\n        axios.get('/posts/' + this.props.match.params.id).then(response => {\n          this.setState({\n            loadedPost: response.data\n          });\n        });\n      }\n    }\n  }\n\n  render() {\n    let post = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }\n    }, \"Please select a Post!\"); // we get the post asyc, but we render right away, so we need to be sure we have the info before we load it.\n\n    if (this.props.match.params.id) {\n      post = /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 20\n        }\n      }, \"Loading...\");\n    }\n\n    if (this.state.loadedPost) {\n      post = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"FullPost\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, this.state.loadedPost.title), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      }, this.state.loadedPost.body), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Edit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.deletePostHandler,\n        className: \"Delete\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }\n      }, \"Delete\")));\n    }\n\n    return post;\n  }\n\n}\n\nexport default FullPost;","map":{"version":3,"sources":["/Users/rachelleondiege/ReactClass/http-access/src/containers/Blog/FullPost/FullPost.js"],"names":["React","Component","axios","FullPost","state","loadedPost","deletePostHandler","delete","props","match","params","id","then","response","console","log","setState","componentDidMount","prevProps","prevState","snapshot","loadData","componentDidUpdate","get","data","render","post","textAlign","title","body"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,gBAAP;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAE7BG,KAF6B,GAErB;AACJC,MAAAA,UAAU,EAAE;AADR,KAFqB;;AAAA,SA8B7BC,iBA9B6B,GA8BT,MAAM;AACtBJ,MAAAA,KAAK,CAACK,MAAN,CAAa,YAAY,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAjD,EACKC,IADL,CACUC,QAAQ,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,aAAKG,QAAL,CAAc;AAACX,UAAAA,UAAU,EAAE;AAAb,SAAd;AACH,OAJL;AAKH,KApC4B;AAAA;;AAK7BY,EAAAA,iBAAiB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC9CN,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAjB;AACA,SAAKa,QAAL;AAEH;;AAEDC,EAAAA,kBAAkB,CAACJ,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,SAAKC,QAAL;AACH,GAb4B,CAe7B;;;AACAA,EAAAA,QAAQ,GAAG;AACP,QAAG,KAAKb,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA3B,EAA+B;AAC3B;AACA;AACA,UAAG,CAAC,KAAKP,KAAL,CAAWC,UAAZ,IAA0B,KAAKD,KAAL,CAAWC,UAAX,CAAsBM,EAAtB,IAA4B,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAjF,EAAoF;AAChFT,QAAAA,KAAK,CAACqB,GAAN,CAAU,YAAY,KAAKf,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EACKC,IADL,CACUC,QAAQ,IAAI;AACd,eAAKG,QAAL,CAAc;AAACX,YAAAA,UAAU,EAAEQ,QAAQ,CAACW;AAAtB,WAAd;AACH,SAHL;AAIH;AAEJ;AACJ;;AAUDC,EAAAA,MAAM,GAAI;AACN,QAAIC,IAAI,gBAAG;AAAG,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAX,CADM,CAEN;;AACA,QAAG,KAAKnB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA3B,EAA+B;AAC3Be,MAAAA,IAAI,gBAAG;AAAG,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAC;AAAX,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AACD,QAAG,KAAKvB,KAAL,CAAWC,UAAd,EAA0B;AACtBqB,MAAAA,IAAI,gBACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKtB,KAAL,CAAWC,UAAX,CAAsBuB,KAA3B,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKxB,KAAL,CAAWC,UAAX,CAAsBwB,IAA1B,CAFJ,eAGI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,OAAO,EAAE,KAAKvB,iBAAtB;AAAyC,QAAA,SAAS,EAAC,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAHJ,CADJ;AASH;;AACD,WAAOoB,IAAP;AACH;;AAxD4B;;AA2DjC,eAAevB,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n\n    state = {\n        loadedPost: null\n    }\n    componentDidMount(prevProps, prevState, snapshot) {\n        console.log(this.props);\n        this.loadData();\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.loadData();\n    }\n\n    // we have to us both DidMount and DidUpdate when using routes, as routes re-uses components\n    loadData() {\n        if(this.props.match.params.id) {\n            // If we don't do this we will get in infinite loop as setting the state will\n            // keep calling render, which will keep calling this function\n            if(!this.state.loadedPost || this.state.loadedPost.id != this.props.match.params.id){\n                axios.get('/posts/' + this.props.match.params.id)\n                    .then(response => {\n                        this.setState({loadedPost: response.data});\n                    });\n            }\n\n        }\n    }\n\n    deletePostHandler = () => {\n        axios.delete('/posts/' + this.props.match.params.id)\n            .then(response => {\n                console.log(response);\n                this.setState({loadedPost: null});\n            })\n    }\n\n    render () {\n        let post = <p style={{textAlign:'center'}}>Please select a Post!</p>;\n        // we get the post asyc, but we render right away, so we need to be sure we have the info before we load it.\n        if(this.props.match.params.id) {\n            post = <p style={{textAlign:'center'}}>Loading...</p>;\n        }\n        if(this.state.loadedPost) {\n            post = (\n                <div className=\"FullPost\">\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className=\"Edit\">\n                        <button onClick={this.deletePostHandler} className=\"Delete\">Delete</button>\n                    </div>\n                </div>\n            );\n        }\n        return post;\n    }\n}\n\nexport default FullPost;"]},"metadata":{},"sourceType":"module"}